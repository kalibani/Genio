generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum SubscriptionType {
  FREE
  FLEXIBLE
  BASIC
  PRO
  PREMIUM
}

model userAPILimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  File    File[]
  Message Message[]

  stripeCustomerId             String?           @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId         String?           @unique @map(name: "stripe_subscription_id")
  stripePriceId                String?           @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd       DateTime?         @map(name: "stripe_current_period_end")
  GeneratedVoices              GeneratedVoices[]
  subscriptionType             SubscriptionType  @default(FREE)
  currentSubscriptionPeriodEnd DateTime?
  Transactions                 Transactions[]
  characterCount Int?
  maxFreeCount Int? @default(25)
  isUserAgreedTermsOfService Boolean @default(false)
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  messages     Message[]
  reportOfAnalysis  Json?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  User      userAPILimit? @relation(fields: [userId], references: [userId])
  userId    String?
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  User      userAPILimit? @relation(fields: [userId], references: [userId])
  userId    String?
  File      File?         @relation(fields: [fileId], references: [id])
  fileId    String?
}

enum voiceCategory {
  created
  cloned
  generated
  professional
}

enum State {
  created
  deleted
  processing
}

model GeneratedVoices {
  id                       String        @id @default(cuid())
  characterCountChangeFrom Int
  characterCountChangeTo   Int
  contentType              String
  dateUnix                 Int
  feedback                 Json?
  historyItemId            String @unique
  modelId                  String
  requestId                String
  settings                 Json?
  shareLinkId              String?
  state                    State
  text                     String
  voiceCategory            String
  voiceId                  String
  voiceName                String
  User                     userAPILimit? @relation(fields: [userId], references: [userId])
  userId                   String?
  isPaid Boolean @default(false)
}

model Transactions {
  id         String        @id @default(cuid())
  User       userAPILimit? @relation(fields: [userId], references: [userId])
  userId     String?
  orderId String
  amountPaid Decimal
  productName String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
