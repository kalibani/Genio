generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum JOB_STATUS {
  CREATED
}

enum SubscriptionType {
  FREE
  FLEXIBLE
  BASIC
  PRO
  PREMIUM
}

enum UserRole {
  ADMIN
  USER
}

enum PACKAGE_TYPE {
  BASIC
  PRO
  PREMIUM
}

enum WORK_MODEL {
  ONSITE
  REMOTE
  HYBRID
}

enum CV_SOURCE {
  UPLOAD
  LINKEDIN
}

enum ANALYSYS_STATUS {
  ANALYSYS
  REJECTED
  INTERVIEW
  ON_ANALYSYS
  PENDING
  SHORTLISTED
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  password         String?
  image            String?
  accounts         Account[]
  emailVerified    DateTime?
  secretIv         String?
  userOrganization UserOrganization[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Role {
  id               String             @id @default(cuid())
  name             String
  permissions      Json
  userOrganization UserOrganization[]
}

model Organization {
  id                    String              @id @default(cuid())
  name                  String
  packageType           PACKAGE_TYPE
  limit                 Int
  logo                  String?
  used                  Int
  agreeTermAndCondition Boolean             @default(false)
  userOrganization      UserOrganization[]
  interviewTemplates    InterviewTemplate[]
  invitedUsers          InvitedUser[]
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  roleId         String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])
}

model InterviewTemplate {
  id                   String     @id @default(cuid())
  title                String
  durationTimeRead     Int
  durationTimeAnswered Int
  questionRetake       Int?
  introVideoUrl        String?
  farewellVideoUrl     String?
  farewellTitle        String?
  farewellDescription  String?
  questions            Json 

  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
}

enum invitedUserStatus {
  INVITED
  NO_RESPONSE
  COMPLETED
}
model InvitedUser {
  id             String  @id @default(cuid())
  candidateName  String
  email          String
  phoneNumber    String?
  batchJobId     String?
  batchJob       BatchJob? @relation(fields: [batchJobId], references: [id])
  result         Json
  status         invitedUserStatus @default(INVITED)
  createdAt      DateTime @default(now())
  expiredDate    DateTime
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  templateId     String
}

model userAPILimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  File    File[]
  Message Message[]

  stripeCustomerId             String?           @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId         String?           @unique @map(name: "stripe_subscription_id")
  stripePriceId                String?           @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd       DateTime?         @map(name: "stripe_current_period_end")
  GeneratedVoices              GeneratedVoices[]
  subscriptionType             SubscriptionType  @default(FREE)
  currentSubscriptionPeriodEnd DateTime?
  Transactions                 Transactions[]
  maxFreeCount                 Int?              @default(100)
  characterCount               Int?
  isUserAgreedTermsOfService   Boolean           @default(false)
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model CvAnalysis {
  id               String          @id @default(cuid())
  cvId             String
  orgId            String
  batchJobId       String
  batch            BatchJob        @relation(fields: [batchJobId], references: [id])
  reportOfAnalysis Json?
  cv               Cv              @relation(fields: [cvId], references: [id])
  status           ANALYSYS_STATUS @default(PENDING)
  isQualified      Boolean         @default(false)
}

model Cv {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  orgId        String
  title        String?
  analyses     CvAnalysis[]
  source       CV_SOURCE
}

model BatchJob {
  id              String       @id @default(cuid())
  jobName         String
  status          JOB_STATUS   @default(CREATED)
  orgId           String
  jobDescription  String
  location        String
  createdAt       DateTime     @default(now())
  salaryCurrency  String?
  salaryRangeFrom Int?
  salaryRangeEnd  Int?
  experience      Int?
  companyName     String?
  languageAi      String?
  matchPercentage Int?
  keyFocus        Json?
  workModel       WORK_MODEL
  cvAnalysis      CvAnalysis[]
  invitedUser     InvitedUser[]
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus     UploadStatus @default(PENDING)
  url              String
  key              String
  messages         Message[]
  reportOfAnalysis Json?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  User      userAPILimit? @relation(fields: [userId], references: [userId])
  userId    String?
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  User      userAPILimit? @relation(fields: [userId], references: [userId])
  userId    String?
  File      File?         @relation(fields: [fileId], references: [id])
  fileId    String?
}

enum voiceCategory {
  created
  cloned
  generated
  professional
}

enum State {
  created
  deleted
  processing
}

model GeneratedVoices {
  id                       String        @id @default(cuid())
  characterCountChangeFrom Int
  characterCountChangeTo   Int
  contentType              String
  dateUnix                 Int
  feedback                 Json?
  historyItemId            String        @unique
  modelId                  String
  requestId                String
  settings                 Json?
  shareLinkId              String?
  state                    State
  text                     String
  voiceCategory            String
  voiceId                  String
  voiceName                String
  User                     userAPILimit? @relation(fields: [userId], references: [userId])
  userId                   String?
  isPaid                   Boolean       @default(false)
}

model Transactions {
  id          String        @id @default(cuid())
  User        userAPILimit? @relation(fields: [userId], references: [userId])
  userId      String?
  orderId     String
  amountPaid  Decimal
  productName String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
